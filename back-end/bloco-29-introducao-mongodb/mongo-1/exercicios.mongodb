/**
 * O MongoDB possui diversas ferramentas como, por exemplo, mongo, mongosh, Compass e outras ferramentas de terceiros. Voc√™ pode utilizar o que achar melhor para executar as queries, o importante √© realiz√°-las.
Utilizando a cole√ß√£o bios, construa queries para retornar os seguintes itens:
 */
use('exerciciosmongo');
db.bios.insertMany([
    {
        "_id": 1,
        "name": {
            "first": "John",
            "last": "Backus"
        },
        "birth": ISODate("1924-12-03T05:00:00Z"),
        "death": ISODate("2007-03-17T04:00:00Z"),
        "contribs": [
            "Fortran",
            "ALGOL",
            "Backus-Naur Form",
            "FP"
        ],
        "awards": [
            {
                "award": "W.W. McDowell Award",
                "year": 1967,
                "by": "IEEE Computer Society"
            },
            {
                "award": "National Medal of Science",
                "year": 1975,
                "by": "National Science Foundation"
            },
            {
                "award": "Turing Award",
                "year": 1977,
                "by": "ACM"
            },
            {
                "award": "Draper Prize",
                "year": 1993,
                "by": "National Academy of Engineering"
            }
        ]
    },
    {
        "_id": ObjectId("51df07b094c6acd67e492f41"),
        "name": {
            "first": "John",
            "last": "McCarthy"
        },
        "birth": ISODate("1927-09-04T04:00:00Z"),
        "death": ISODate("2011-12-24T05:00:00Z"),
        "contribs": [
            "Lisp",
            "Artificial Intelligence",
            "ALGOL"
        ],
        "awards": [
            {
                "award": "Turing Award",
                "year": 1971,
                "by": "ACM"
            },
            {
                "award": "Kyoto Prize",
                "year": 1988,
                "by": "Inamori Foundation"
            },
            {
                "award": "National Medal of Science",
                "year": 1990,
                "by": "National Science Foundation"
            }
        ]
    },
    {
        "_id": 3,
        "name": {
            "first": "Grace",
            "last": "Hopper"
        },
        "title": "Rear Admiral",
        "birth": ISODate("1906-12-09T05:00:00Z"),
        "death": ISODate("1992-01-01T05:00:00Z"),
        "contribs": [
            "UNIVAC",
            "compiler",
            "FLOW-MATIC",
            "COBOL"
        ],
        "awards": [
            {
                "award": "Computer Sciences Man of the Year",
                "year": 1969,
                "by": "Data Processing Management Association"
            },
            {
                "award": "Distinguished Fellow",
                "year": 1973,
                "by": " British Computer Society"
            },
            {
                "award": "W. W. McDowell Award",
                "year": 1976,
                "by": "IEEE Computer Society"
            },
            {
                "award": "National Medal of Technology",
                "year": 1991,
                "by": "United States"
            }
        ]
    },
    {
        "_id": 4,
        "name": {
            "first": "Kristen",
            "last": "Nygaard"
        },
        "birth": ISODate("1926-08-27T04:00:00Z"),
        "death": ISODate("2002-08-10T04:00:00Z"),
        "contribs": [
            "OOP",
            "Simula"
        ],
        "awards": [
            {
                "award": "Rosing Prize",
                "year": 1999,
                "by": "Norwegian Data Association"
            },
            {
                "award": "Turing Award",
                "year": 2001,
                "by": "ACM"
            },
            {
                "award": "IEEE John von Neumann Medal",
                "year": 2001,
                "by": "IEEE"
            }
        ]
    },
    {
        "_id": 5,
        "name": {
            "first": "Ole-Johan",
            "last": "Dahl"
        },
        "birth": ISODate("1931-10-12T04:00:00Z"),
        "death": ISODate("2002-06-29T04:00:00Z"),
        "contribs": [
            "OOP",
            "Simula"
        ],
        "awards": [
            {
                "award": "Rosing Prize",
                "year": 1999,
                "by": "Norwegian Data Association"
            },
            {
                "award": "Turing Award",
                "year": 2001,
                "by": "ACM"
            },
            {
                "award": "IEEE John von Neumann Medal",
                "year": 2001,
                "by": "IEEE"
            }
        ]
    },
    {
        "_id": 6,
        "name": {
            "first": "Guido",
            "last": "van Rossum"
        },
        "birth": ISODate("1956-01-31T05:00:00Z"),
        "contribs": [
            "Python"
        ],
        "awards": [
            {
                "award": "Award for the Advancement of Free Software",
                "year": 2001,
                "by": "Free Software Foundation"
            },
            {
                "award": "NLUUG Award",
                "year": 2003,
                "by": "NLUUG"
            }
        ]
    },
    {
        "_id": ObjectId("51e062189c6ae665454e301d"),
        "name": {
            "first": "Dennis",
            "last": "Ritchie"
        },
        "birth": ISODate("1941-09-09T04:00:00Z"),
        "death": ISODate("2011-10-12T04:00:00Z"),
        "contribs": [
            "UNIX",
            "C"
        ],
        "awards": [
            {
                "award": "Turing Award",
                "year": 1983,
                "by": "ACM"
            },
            {
                "award": "National Medal of Technology",
                "year": 1998,
                "by": "United States"
            },
            {
                "award": "Japan Prize",
                "year": 2011,
                "by": "The Japan Prize Foundation"
            }
        ]
    },
    {
        "_id": 8,
        "name": {
            "first": "Yukihiro",
            "aka": "Matz",
            "last": "Matsumoto"
        },
        "birth": ISODate("1965-04-14T04:00:00Z"),
        "contribs": [
            "Ruby"
        ],
        "awards": [
            {
                "award": "Award for the Advancement of Free Software",
                "year": "2011",
                "by": "Free Software Foundation"
            }
        ]
    },
    {
        "_id": 9,
        "name": {
            "first": "James",
            "last": "Gosling"
        },
        "birth": ISODate("1955-05-19T04:00:00Z"),
        "contribs": [
            "Java"
        ],
        "awards": [
            {
                "award": "The Economist Innovation Award",
                "year": 2002,
                "by": "The Economist"
            },
            {
                "award": "Officer of the Order of Canada",
                "year": 2007,
                "by": "Canada"
            }
        ]
    },
    {
        "_id": 10,
        "name": {
            "first": "Martin",
            "last": "Odersky"
        },
        "contribs": [
            "Scala"
        ]
    }

]);
//Exerc√≠cio 1: Retorne o documento com o _id igual a 8.
use('exerciciosmongo');
db.bios.find({_id: 8});

//Exerc√≠cio 2: Retorne o documento com o _id igual a 8, mas s√≥ exiba os atributos: _id e name.
use('exerciciosmongo');
db.bios.find({_id: 8}, {name: true});

//üöÄ Exerc√≠cio 3: Retorne apenas os atributos name e birth do documento com o _id igual a 8.
use('exerciciosmongo');
db.bios.find({_id: 8}, {name: true, birth: true});

//Exerc√≠cio 4: Retorne todos os documentos em que o atributo name.first seja igual a John,
// utilizando o m√©todo pretty().
use('exerciciosmongo');
db.bios.find({'name.first': 'John'}).pretty();
//Exerc√≠cio 5: Retorne os 3 primeiros documentos da cole√ß√£o bios utilizando o m√©todo pretty().
use('exerciciosmongo');
db.bios.find().limit(3).pretty();
//Exerc√≠cio 6: Retorne 2 documentos da cole√ß√£o bios pulando os 5 primeiros documentos.
use('exerciciosmongo');
db.bios.find().skip(5).limit(3).pretty();

//Utilizando o mongoimport, importe o arquivo books.json para a sua inst√¢ncia local do MongoDB e utilize a cole√ß√£o books para construir as seguintes consultas:

//üöÄ Exerc√≠cio 7: Retorne a quantidade de documentos da cole√ß√£o books.
use('exerciciosmongo');
db.books.find().count();
//üöÄ Exerc√≠cio 8: Conte quantos livros existem com o status = "PUBLISH".
use('exerciciosmongo');
db.books.find({status:'PUBLISH'}).count();
//üöÄ Exerc√≠cio 9: Exiba os atributos title, isbn e pageCount dos 3 primeiros livros. N√ÉO retorne o atributo _id.
use('exerciciosmongo');
db.books.find({}, {title: true, isbn: true, pageCount: true, _id: false}).limit(3);
//Exerc√≠cio 10: Pule 5 documentos e exiba os atributos _id, title, authors e status dos livros com o status = "MEAP", limitando-se a 10 documentos.
use('exerciciosmongo');
db.books.find({status: 'MEAP'}, {authors: true, status: true}).skip(5).limit(10);
